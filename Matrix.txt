//2019.3.9
package algorithmexec;
/*
 * 一个N*N矩阵中有不同的正整数，经过这个格子，就能获得相应价值的奖励，从左上走到右下，只能向下或者向右走，求能够获得的最大价值。例如：3 * 3的方格。
1 3 3 
2 1 3 
2 2 1
能够获得的最大价值为：11。
行数列数都从1开始
状态：dp[i][j]走到第i行第j列获得的最大价值
状态转移方程：走到第i行第j列之前，我们需要知道之前所获得最大价值，因为要求只能向下或者向右走，所以只考虑走到dp[i-1][j],dp[i][j]，取这两个中最大的加上dp[i][j]
就是走到第i行第j列所能获得的最大价值，即：dp[i][j]=max{dp[i-1][j],dp[i][j]}+dp[i][j].
 */

import java.util.Scanner;

public class Matrix {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		@SuppressWarnings("resource")
		Scanner sca=new Scanner(System.in);
		int n=sca.nextInt();//矩阵行列数
		int[][] dp=new int[n+1][n+1];
		
		for(int i=1;i<n+1;i++) {
			for(int j=1;j<n+1;j++) {
				dp[i][j]=sca.nextInt();//从dp[1][1]开始输入矩阵
			}
		}
		for(int i=1;i<n+1;i++) {
			for(int j=1;j<n+1;j++) {
				dp[i][j]=Math.max(dp[i-1][j], dp[i][j-1])+dp[i][j];
			}
		}
		System.out.println(dp[n][n]);
		

	}

}
