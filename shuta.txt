//2019.3.9
package algorithmexec;

import java.util.Scanner;
/*
 * 一个高度为N的由正整数组成的三角形，从上走到下，求经过的数字和的最大值。 
每次只能走到下一层相邻的数上，例如从第3层的6向下走，只能走到第4层的2或9上。
该三角形第n层有n个数字，例如：
第一层有一个数字：5
第二层有两个数字：8 4
第三层有三个数字：3 6 9
第四层有四个数字：7 2 9 5
最优方案是：5 + 8 + 6 + 9 = 28
状态：f(i,j)是第i行第j列项的最大取数和;求f(n,m),n行中的最大数；
状态转移方程：f(i,j)=max{f(i-1,j-1),f(i-1,j)}+dp[i][j].
 */

public class Shuta {

	@SuppressWarnings("resource")
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scan = new Scanner(System.in);
		
		int n=scan.nextInt();//数塔有几层
		long max=0;
		int[] [] dp=new int[n][n];
		dp[0][0]=scan.nextInt();//塔顶
		
		for(int i=1;i<n;i++) {
			for(int j=0;j<=i;j++) {
				int num=scan.nextInt();
				if(j==0) {
					dp[i][j]=dp[i-1][j]+num;
				}else {
					dp[i][j]=Math.max(dp[i-1][j-1], dp[i-1][j])+num;
				}
				max=Math.max(dp[i][j], max);
			}
		}
		System.out.println(max);
		

	}

	
}
